/*
 * This file is generated by jOOQ.
 */
package by.zbokostya.generated.jooq.tables;


import by.zbokostya.generated.jooq.Indexes;
import by.zbokostya.generated.jooq.Keys;
import by.zbokostya.generated.jooq.Public;
import by.zbokostya.generated.jooq.tables.records.AbilityRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ability extends TableImpl<AbilityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ability</code>
     */
    public static final Ability ABILITY = new Ability();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbilityRecord> getRecordType() {
        return AbilityRecord.class;
    }

    /**
     * The column <code>public.ability.id</code>.
     */
    public final TableField<AbilityRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.ability.name</code>.
     */
    public final TableField<AbilityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ability.url</code>.
     */
    public final TableField<AbilityRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ability.type</code>.
     */
    public final TableField<AbilityRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.ability.project</code>.
     */
    public final TableField<AbilityRecord, UUID> PROJECT = createField(DSL.name("project"), SQLDataType.UUID.nullable(false), this, "");

    private Ability(Name alias, Table<AbilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ability(Name alias, Table<AbilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ability</code> table reference
     */
    public Ability(String alias) {
        this(DSL.name(alias), ABILITY);
    }

    /**
     * Create an aliased <code>public.ability</code> table reference
     */
    public Ability(Name alias) {
        this(alias, ABILITY);
    }

    /**
     * Create a <code>public.ability</code> table reference
     */
    public Ability() {
        this(DSL.name("ability"), null);
    }

    public <O extends Record> Ability(Table<O> child, ForeignKey<O, AbilityRecord> key) {
        super(child, key, ABILITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ABILITY_ID_UINDEX, Indexes.ABILITY_URL_UINDEX);
    }

    @Override
    public UniqueKey<AbilityRecord> getPrimaryKey() {
        return Keys.ABILITY_PK;
    }

    @Override
    public List<ForeignKey<AbilityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ABILITY__ABILITY_PROJECT_ID_FK);
    }

    private transient Project _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public Project project() {
        if (_project == null)
            _project = new Project(this, Keys.ABILITY__ABILITY_PROJECT_ID_FK);

        return _project;
    }

    @Override
    public Ability as(String alias) {
        return new Ability(DSL.name(alias), this);
    }

    @Override
    public Ability as(Name alias) {
        return new Ability(alias, this);
    }

    @Override
    public Ability as(Table<?> alias) {
        return new Ability(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ability rename(String name) {
        return new Ability(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ability rename(Name name) {
        return new Ability(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ability rename(Table<?> name) {
        return new Ability(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, String, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super String, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super String, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
