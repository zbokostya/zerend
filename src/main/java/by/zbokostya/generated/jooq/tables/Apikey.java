/*
 * This file is generated by jOOQ.
 */
package by.zbokostya.generated.jooq.tables;


import by.zbokostya.generated.jooq.Indexes;
import by.zbokostya.generated.jooq.Keys;
import by.zbokostya.generated.jooq.Public;
import by.zbokostya.generated.jooq.tables.records.ApikeyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apikey extends TableImpl<ApikeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.apikey</code>
     */
    public static final Apikey APIKEY = new Apikey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeyRecord> getRecordType() {
        return ApikeyRecord.class;
    }

    /**
     * The column <code>public.apikey.project</code>.
     */
    public final TableField<ApikeyRecord, UUID> PROJECT = createField(DSL.name("project"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.apikey.apikey</code>.
     */
    public final TableField<ApikeyRecord, String> APIKEY_ = createField(DSL.name("apikey"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.apikey.role</code>.
     */
    public final TableField<ApikeyRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.apikey.id</code>.
     */
    public final TableField<ApikeyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    private Apikey(Name alias, Table<ApikeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apikey(Name alias, Table<ApikeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.apikey</code> table reference
     */
    public Apikey(String alias) {
        this(DSL.name(alias), APIKEY);
    }

    /**
     * Create an aliased <code>public.apikey</code> table reference
     */
    public Apikey(Name alias) {
        this(alias, APIKEY);
    }

    /**
     * Create a <code>public.apikey</code> table reference
     */
    public Apikey() {
        this(DSL.name("apikey"), null);
    }

    public <O extends Record> Apikey(Table<O> child, ForeignKey<O, ApikeyRecord> key) {
        super(child, key, APIKEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.APIKEY_ID_UINDEX);
    }

    @Override
    public UniqueKey<ApikeyRecord> getPrimaryKey() {
        return Keys.APIKEY_PK;
    }

    @Override
    public List<ForeignKey<ApikeyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APIKEY__APIKEY_PROJECT_ID_FK);
    }

    private transient Project _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public Project project() {
        if (_project == null)
            _project = new Project(this, Keys.APIKEY__APIKEY_PROJECT_ID_FK);

        return _project;
    }

    @Override
    public Apikey as(String alias) {
        return new Apikey(DSL.name(alias), this);
    }

    @Override
    public Apikey as(Name alias) {
        return new Apikey(alias, this);
    }

    @Override
    public Apikey as(Table<?> alias) {
        return new Apikey(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(String name) {
        return new Apikey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(Name name) {
        return new Apikey(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(Table<?> name) {
        return new Apikey(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
