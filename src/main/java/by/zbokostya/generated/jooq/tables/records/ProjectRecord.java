/*
 * This file is generated by jOOQ.
 */
package by.zbokostya.generated.jooq.tables.records;


import by.zbokostya.generated.jooq.tables.Project;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectRecord extends UpdatableRecordImpl<ProjectRecord> implements Record4<UUID, String, String, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.project.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.project.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.project.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.project.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.project.url</code>.
     */
    public void setUrl(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.project.url</code>.
     */
    public String getUrl() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.project.owner</code>.
     */
    public void setOwner(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.project.owner</code>.
     */
    public UUID getOwner() {
        return (UUID) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, UUID> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Project.PROJECT.ID;
    }

    @Override
    public Field<String> field2() {
        return Project.PROJECT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Project.PROJECT.URL;
    }

    @Override
    public Field<UUID> field4() {
        return Project.PROJECT.OWNER;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getUrl();
    }

    @Override
    public UUID component4() {
        return getOwner();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getUrl();
    }

    @Override
    public UUID value4() {
        return getOwner();
    }

    @Override
    public ProjectRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ProjectRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProjectRecord value3(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public ProjectRecord value4(UUID value) {
        setOwner(value);
        return this;
    }

    @Override
    public ProjectRecord values(UUID value1, String value2, String value3, UUID value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectRecord
     */
    public ProjectRecord() {
        super(Project.PROJECT);
    }

    /**
     * Create a detached, initialised ProjectRecord
     */
    public ProjectRecord(UUID id, String name, String url, UUID owner) {
        super(Project.PROJECT);

        setId(id);
        setName(name);
        setUrl(url);
        setOwner(owner);
    }

    /**
     * Create a detached, initialised ProjectRecord
     */
    public ProjectRecord(by.zbokostya.generated.jooq.tables.pojos.Project value) {
        super(Project.PROJECT);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setUrl(value.getUrl());
            setOwner(value.getOwner());
        }
    }
}
